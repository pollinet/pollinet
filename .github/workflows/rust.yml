name: CI/CD Pipeline

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    branches: ["main"]
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check documentation
        run: cargo doc --no-deps --document-private-items --all-features

  # Security Auditing
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Run cargo-deny
        uses: EmbarkStudios/cargo-deny-action@v1

  # Cross-platform Testing
  test:
    name: Test Suite
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, 1.70.0] # MSRV
        exclude:
          # Reduce matrix size - only test MSRV on Ubuntu
          - os: windows-latest
            rust: 1.70.0
          - os: macos-latest
            rust: 1.70.0
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # Platform-specific BLE setup
      - name: Install BLE dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libbluetooth-dev libdbus-1-dev

      - name: Install BLE dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          # macOS has built-in BLE support
          echo "BLE support available via Core Bluetooth"

      - name: Build
        run: cargo build --verbose --all-features

      - name: Run tests
        run: cargo test --verbose --all-features

      - name: Run doc tests
        run: cargo test --doc --all-features

  # Performance Benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install BLE dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libbluetooth-dev libdbus-1-dev

      - name: Run benchmarks
        run: cargo bench --all-features

      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: "cargo"
          output-file-path: target/criterion/report/index.html
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  # Coverage Analysis
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install BLE dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libbluetooth-dev libdbus-1-dev

      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov

      - name: Generate coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v4
        with:
          file: lcov.info
          fail_ci_if_error: true

  # Binary Size Analysis
  binary-size:
    name: Binary Size Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install BLE dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libbluetooth-dev libdbus-1-dev

      - name: Build release binary
        run: cargo build --release

      - name: Check binary size
        run: |
          ls -la target/release/pollinet
          size target/release/pollinet

  # Release Builds
  release:
    name: Release Builds
    if: github.event_name == 'release'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: pollinet-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: pollinet-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: pollinet-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: pollinet-macos-arm64

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install BLE dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libbluetooth-dev libdbus-1-dev

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: target/${{ matrix.target }}/release/pollinet${{ contains(matrix.os, 'windows') && '.exe' || '' }}
          asset_name: ${{ matrix.artifact_name }}
          asset_content_type: application/octet-stream

  # Publish to crates.io
  # publish:
  #   name: Publish to crates.io
  #   if: github.event_name == 'release'
  #   runs-on: ubuntu-latest
  #   needs: [quality, security, test, coverage]
  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Install Rust
  #     uses: dtolnay/rust-toolchain@stable

  #   - name: Install BLE dependencies
  #     run: |
  #       sudo apt-get update
  #       sudo apt-get install -y libbluetooth-dev libdbus-1-dev

  #   - name: Publish to crates.io
  #     run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
